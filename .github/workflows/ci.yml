name: Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  linters:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        lint-command:
          - ruff --format=github .
          - black --check --diff .
          - mypy model_bakery
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip
      - run: python -m pip install .[test]
      - run: ${{ matrix.lint-command }}

  tests-sqlite:
    name: Python ${{ matrix.python }} | Django ${{ matrix.django }} | sqlite
    needs:
      - linters
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: [ "3.8", "3.9", "3.10", "3.11" ]
        django: [ "3.2", "4.1", "4.2" ]
    env:
      TEST_DB: sqlite
      USE_TZ: true
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: pip
      - run: python -m pip install .[test]
      - run: python -m pytest

  tests-postgres:
    name: Python ${{ matrix.python }} | Django ${{ matrix.django }} | postgres (psycopg3)
    needs:
      - linters
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: [ "3.11" ]
        django: [ "4.2" ]
    env:
        PGUSER: postgres
        PGPASSWORD: postgres
        TEST_DB: postgis
    services:
      postgis:
        image: postgis/postgis
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin
          psql template1 -c "CREATE EXTENSION citext;" -U postgres -h localhost -p 5432
          psql template1 -c "CREATE EXTENSION hstore;" -U postgres -h localhost -p 5432
          psql template1 -c "CREATE EXTENSION postgis;" -U postgres -h localhost -p 5432

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: pip
      - run: python -m pip install .[test]
      - run: python -m pip install psycopg
      - run: python -m pytest

  tests-postgres-psycopg2:
    name: Python ${{ matrix.python }} | Django ${{ matrix.django }} | postgres (psycopg2)
    needs:
      - linters
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python: [ "3.8", "3.9", "3.10", "3.11" ]
        django: [ "3.2", "4.1", "4.2" ]
    env:
      PGUSER: postgres
      PGPASSWORD: postgres
      TEST_DB: postgis
    services:
      postgis:
        image: postgis/postgis
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin
          psql template1 -c "CREATE EXTENSION citext;" -U postgres -h localhost -p 5432
          psql template1 -c "CREATE EXTENSION hstore;" -U postgres -h localhost -p 5432
          psql template1 -c "CREATE EXTENSION postgis;" -U postgres -h localhost -p 5432

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: pip
      - run: python -m pip install .[test]
      - run: python -m pip install psycopg2-binary
      - run: python -m pytest
